import streamlit as st
from utils import carregar_dados_acao, criar_grafico_cotacao, ACOES_BANCARIAS

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Analisador de Cota√ß√µes Banc√°rias",
    page_icon="üìà",
    layout="wide"
)

def main():
    # T√≠tulo da aplica√ß√£o
    st.title("üìà Analisador de Cota√ß√µes Banc√°rias")
    st.markdown("Analise o hist√≥rico de cota√ß√µes de a√ß√µes banc√°rias brasileiras.")
    
    # Sidebar para sele√ß√µes
    st.sidebar.header("Configura√ß√µes")
    
    # Sele√ß√£o da a√ß√£o
    acao_selecionada = st.sidebar.selectbox(
        "Escolha a a√ß√£o banc√°ria:", list(ACOES_BANCARIAS.keys())
    )
    
    # Sele√ß√£o do per√≠odo
    periodo = st.sidebar.slider("Per√≠odo (anos):", 1, 10, 5)
    
    # Obter c√≥digo da a√ß√£o
    codigo_acao = ACOES_BANCARIAS[acao_selecionada]
    
    # Carregar dados
    with st.spinner(f"Carregando dados de {acao_selecionada}..."):
        dados = carregar_dados_acao(codigo_acao, periodo)
    
    if not dados.empty:
        # Exibir m√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Pre√ßo Atual", f"R$ {dados['Close'].iloc[-1]:.2f}",
                     f"{((dados['Close'].iloc[-1] / dados['Close'].iloc[-2] - 1) * 100):.2f}%")
        with col2:
            st.metric("Maior Pre√ßo", f"R$ {dados['High'].max():.2f}")
        with col3:
            st.metric("Menor Pre√ßo", f"R$ {dados['Low'].min():.2f}")
        with col4:
            st.metric("Volume M√©dio", f"{dados['Volume'].mean():,.0f}")
        
        # Criar e exibir gr√°fico
        fig = criar_grafico_cotacao(dados, f"Hist√≥rico - {acao_selecionada}")
        if fig:
            st.plotly_chart(fig, use_container_width=True)
        
        # Exibir tabela de dados
        st.subheader("üìä Dados Detalhados")
        mostrar_todos = st.checkbox("Mostrar todos os dados")
        dados_exibir = dados if mostrar_todos else dados.tail(30)
        st.dataframe(dados_exibir.round(2), use_container_width=True)
        
        # Bot√£o para download
        csv = dados.to_csv()
        st.download_button("üì• Baixar dados em CSV", csv, 
                          f"{codigo_acao}_{periodo}anos.csv", "text/csv")
    else:
        st.error("N√£o foi poss√≠vel carregar os dados. Tente novamente.")

# Executar aplica√ß√£o
if __name__ == "__main__":
    main()